!function(e){function t(t){for(var n,o,i=t[0],a=t[1],c=t[2],d=0,y=[];d<i.length;d++)o=i[d],Object.prototype.hasOwnProperty.call(l,o)&&l[o]&&y.push(l[o][0]),l[o]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);for(u&&u(t);y.length;)y.shift()();return s.push.apply(s,c||[]),r()}function r(){for(var e,t=0;t<s.length;t++){for(var r=s[t],n=!0,i=1;i<r.length;i++){var a=r[i];0!==l[a]&&(n=!1)}n&&(s.splice(t--,1),e=o(o.s=r[0]))}return e}var n={},l={0:0},s=[];function o(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,o),r.l=!0,r.exports}o.m=e,o.c=n,o.d=function(e,t,r){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(r,n,function(t){return e[t]}.bind(null,n));return r},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="";var i=window.webpackJsonp=window.webpackJsonp||[],a=i.push.bind(i);i.push=t,i=i.slice();for(var c=0;c<i.length;c++)t(i[c]);var u=a;s.push(["tjUo",1]),r()}({"0TlM":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cyrb53=void 0,t.cyrb53=(e,t=0)=>{let r=3735928559^t,n=1103547991^t;for(let t,l=0;l<e.length;l++)t=e.charCodeAt(l),r=Math.imul(r^t,2654435761),n=Math.imul(n^t,1597334677);return r=Math.imul(r^r>>>16,2246822507)^Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507)^Math.imul(r^r>>>13,3266489909),4294967296*(2097151&n)+(r>>>0)}},"1/lR":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Journal=void 0;const n=r("q1tI"),l=r("7DOu");function s(e){return e.selectedEntry&&e.selectedEntry.text||""}const o=e=>{const t=s(e);console.log({initialState:t,selected:e.selectedEntry});const[r,l]=n.useState(t);n.useEffect(()=>{const t=s(e);t!==r&&l(t)},[e.selectedEntry]);const o=e.selectedEntry&&e.selectedEntry.text||"";return n.createElement("div",{style:{flexGrow:1,backgroundColor:"white",height:"96%"},className:"editor"},n.createElement("div",{className:"edit-pane"},n.createElement("label",null,"Journal Entry",n.createElement("textarea",{value:r,onChange:e=>{const t=e.target.value;l(t)}}))),n.createElement("div",{className:"rendered"},o))};t.Journal=e=>{const[t,r]=n.useState(null);return n.createElement("div",{style:{width:"100vw",height:"100vh",backgroundColor:"grey",display:"flex",alignItems:"center"}},n.createElement(l.EntryList,{entries:e.entries,selectEntry:r,selectedEntry:t}),n.createElement(o,{selectedEntry:t}))}},"4AsC":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JournalEntry=void 0;t.JournalEntry=class{constructor(e,t,r,n=(()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,e=>{const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)}))()){this.date=e,this.title=t,this.text=r,this.id=n}}},"7DOu":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EntryList=void 0;const n=r("q1tI"),l=r("0TlM"),s=r("fsJt"),o=e=>{let t=e.selectedEntry==e.entry;return n.createElement("div",{className:t?"entry selected":"entry",style:{backgroundColor:t?"red":"white"},onClick:()=>{e.selectEntry(e.entry)}},e.entry.title)},i=e=>n.createElement("div",{className:"date","data-date":e.date},n.createElement("h1",null,e.date),e.entries.map(t=>n.createElement(o,{key:l.cyrb53(t.title),entry:t,selectEntry:e.selectEntry,selectedEntry:e.selectedEntry})));t.EntryList=e=>{const t=e.entries.reduce((e,t)=>{const r=(n=t.date)instanceof s.DateString?n.withoutTime():new s.DateString(n).withoutTime();var n;return e[r]||(e[r]=[]),e[r].push(t),e},{});return n.createElement("div",{className:"listing",style:{borderRight:"black 5px solid",width:"10%",backgroundColor:"white",height:"96%"}},Object.keys(t).map(r=>{const s=l.cyrb53(r);return n.createElement(i,{key:s,date:r,entries:t[r],selectEntry:e.selectEntry,selectedEntry:e.selectedEntry})}))}},fsJt:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DateString=t.MustBeAValidDateString=void 0;class n extends Error{constructor(e){super(`"${e}" is not a valid date string. it should be an ISO-8601 string`)}}t.MustBeAValidDateString=n;t.DateString=class{constructor(e){if(Number.isNaN(Date.parse(e)))throw new n(e);this.ds=e}asString(){return this.ds}withoutTime(){return this.ds.split("T")[0]}}},tjUo:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("q1tI"),l=r("i8i4"),s=r("1/lR"),o=r("fsJt"),i=r("4AsC"),a=new i.JournalEntry(new o.DateString("2020-07-18T22:10:06Z"),"one","firsty"),c=new i.JournalEntry(new o.DateString("2020-07-17T23:10:06Z"),"two","secondy");l.hydrate(n.createElement(s.Journal,{entries:[a,c]}),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,