!function(e){function t(t){for(var n,l,s=t[0],a=t[1],u=t[2],d=0,y=[];d<s.length;d++)l=s[d],Object.prototype.hasOwnProperty.call(o,l)&&o[l]&&y.push(o[l][0]),o[l]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);for(c&&c(t);y.length;)y.shift()();return i.push.apply(i,u||[]),r()}function r(){for(var e,t=0;t<i.length;t++){for(var r=i[t],n=!0,s=1;s<r.length;s++){var a=r[s];0!==o[a]&&(n=!1)}n&&(i.splice(t--,1),e=l(l.s=r[0]))}return e}var n={},o={0:0},i=[];function l(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,l),r.l=!0,r.exports}l.m=e,l.c=n,l.d=function(e,t,r){l.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,t){if(1&t&&(e=l(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(l.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)l.d(r,n,function(t){return e[t]}.bind(null,n));return r},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="";var s=window.webpackJsonp=window.webpackJsonp||[],a=s.push.bind(s);s.push=t,s=s.slice();for(var u=0;u<s.length;u++)t(s[u]);var c=a;i.push(["tjUo",1]),r()}({"0TlM":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cyrb53=void 0,t.cyrb53=(e,t=0)=>{let r=3735928559^t,n=1103547991^t;for(let t,o=0;o<e.length;o++)t=e.charCodeAt(o),r=Math.imul(r^t,2654435761),n=Math.imul(n^t,1597334677);return r=Math.imul(r^r>>>16,2246822507)^Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507)^Math.imul(r^r>>>13,3266489909),4294967296*(2097151&n)+(r>>>0)}},"1/lR":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Journal=void 0;const n=r("q1tI"),o=r("7DOu"),i=()=>n.createElement("div",{style:{flexGrow:1,backgroundColor:"white",height:"96%"}});t.Journal=e=>{const[t,r]=n.useState(null);return n.createElement("div",{style:{width:"100vw",height:"100vh",backgroundColor:"grey",display:"flex",alignItems:"center"}},n.createElement(o.EntryList,{entries:e.entries,selectEntry:r,selectedEntry:t}),n.createElement(i,null))}},"4AsC":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.JournalEntry=void 0;t.JournalEntry=class{constructor(e,t,r){this.date=e,this.title=t,this.text=r,this.id="xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,e=>{const t=16*Math.random()|0;return("x"==e?t:3&t|8).toString(16)})}}},"7DOu":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EntryList=void 0;const n=r("q1tI"),o=r("0TlM"),i=r("fsJt"),l=e=>{let t=e.selectedEntry==e.entry;return n.createElement("div",{className:t?"entry selected":"entry",style:{backgroundColor:t?"red":"white"},onClick:()=>{e.selectEntry(e.entry)}},e.entry.title)},s=e=>n.createElement("div",{className:"date","data-date":e.date},n.createElement("h1",null,e.date),e.listings.map(t=>n.createElement(l,{key:o.cyrb53(t.title),entry:t,selectEntry:e.selectEntry,selectedEntry:e.selectedEntry})));t.EntryList=e=>{const t=e.entries.reduce((e,t)=>{const r=(n=t.date)instanceof i.DateString?n.withoutTime():new i.DateString(n).withoutTime();var n;return e[r]||(e[r]=[]),e[r].push(t),e},{});return n.createElement("div",{className:"listing",style:{borderRight:"black 5px solid",width:"10%",backgroundColor:"white",height:"96%"}},Object.keys(t).map(r=>{const i=o.cyrb53(r);return n.createElement(s,{key:i,date:r,listings:t[r],selectEntry:e.selectEntry,selectedEntry:e.selectedEntry})}))}},fsJt:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DateString=t.MustBeAValidDateString=void 0;class n extends Error{constructor(e){super(`"${e}" is not a valid date string. it should be an ISO-8601 string`)}}t.MustBeAValidDateString=n;t.DateString=class{constructor(e){if(Number.isNaN(Date.parse(e)))throw new n(e);this.ds=e}asString(){return this.ds}withoutTime(){return this.ds.split("T")[0]}}},tjUo:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("q1tI"),o=r("i8i4"),i=r("1/lR"),l=r("fsJt"),s=r("4AsC"),a=new s.JournalEntry(new l.DateString("2020-07-18T22:10:06Z"),"one",""),u=new s.JournalEntry(new l.DateString("2020-07-17T23:10:06Z"),"two","");o.hydrate(n.createElement(i.Journal,{entries:[a,u]}),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ZhbmN5SGFzaC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvam91cm5hbC50c3giLCJ3ZWJwYWNrOi8vLy4vc3JjL0pvdXJuYWxFbnRyeS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZW50cnlMaXN0LnRzeCIsIndlYnBhY2s6Ly8vLi9zcmMvZGF0ZVN0cmluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHN4Il0sIm5hbWVzIjpbIndlYnBhY2tKc29ucENhbGxiYWNrIiwiZGF0YSIsIm1vZHVsZUlkIiwiY2h1bmtJZCIsImNodW5rSWRzIiwibW9yZU1vZHVsZXMiLCJleGVjdXRlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiZGVmZXJyZWRNb2R1bGVzIiwiYXBwbHkiLCJjaGVja0RlZmVycmVkTW9kdWxlcyIsInJlc3VsdCIsImRlZmVycmVkTW9kdWxlIiwiZnVsZmlsbGVkIiwiaiIsImRlcElkIiwic3BsaWNlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsInMiLCJpbnN0YWxsZWRNb2R1bGVzIiwiMCIsImV4cG9ydHMiLCJtb2R1bGUiLCJsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInAiLCJqc29ucEFycmF5Iiwid2luZG93Iiwib2xkSnNvbnBGdW5jdGlvbiIsInNsaWNlIiwiY3lyYjUzIiwic3RyIiwic2VlZCIsImgxIiwiaDIiLCJjaCIsImNoYXJDb2RlQXQiLCJNYXRoIiwiaW11bCIsIkVkaXRvclBhbmUiLCJzdHlsZSIsImZsZXhHcm93IiwiYmFja2dyb3VuZENvbG9yIiwiaGVpZ2h0IiwiSm91cm5hbCIsInByb3BzIiwic2VsZWN0ZWRFbnRyeSIsInNldFNlbGVjdGVkRW50cnkiLCJSZWFjdCIsInVzZVN0YXRlIiwid2lkdGgiLCJkaXNwbGF5IiwiYWxpZ25JdGVtcyIsIkVudHJ5TGlzdCIsImVudHJpZXMiLCJzZWxlY3RFbnRyeSIsImRhdGUiLCJ0aXRsZSIsInRleHQiLCJ0aGlzIiwiaWQiLCJyZXBsYWNlIiwicmFuZG9tIiwidG9TdHJpbmciLCJFbnRyeSIsImlzU2VsZWN0ZWQiLCJlbnRyeSIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJEYXRlR3JvdXAiLCJsaXN0aW5ncyIsIm1hcCIsImxpc3RpbmdCeURhdGUiLCJyZWR1Y2UiLCJhY2MiLCJkYXRlS2V5IiwieCIsIkRhdGVTdHJpbmciLCJ3aXRob3V0VGltZSIsImJvcmRlclJpZ2h0Iiwia2V5cyIsImRrIiwiaGFzaGVkRGF0ZSIsIk11c3RCZUFWYWxpZERhdGVTdHJpbmciLCJFcnJvciIsImRhdGVTdHJpbmciLCJzdXBlciIsIk51bWJlciIsImlzTmFOIiwiRGF0ZSIsInBhcnNlIiwiZHMiLCJzcGxpdCIsImEiLCJKb3VybmFsRW50cnkiLCJiIiwiaHlkcmF0ZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNFLFNBQVNBLEVBQXFCQyxHQVE3QixJQVBBLElBTUlDLEVBQVVDLEVBTlZDLEVBQVdILEVBQUssR0FDaEJJLEVBQWNKLEVBQUssR0FDbkJLLEVBQWlCTCxFQUFLLEdBSUhNLEVBQUksRUFBR0MsRUFBVyxHQUNwQ0QsRUFBSUgsRUFBU0ssT0FBUUYsSUFDekJKLEVBQVVDLEVBQVNHLEdBQ2hCRyxPQUFPQyxVQUFVQyxlQUFlQyxLQUFLQyxFQUFpQlgsSUFBWVcsRUFBZ0JYLElB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TUFBTyxNQUNQUixnQkFBaUIsUUFDakJDLE9BQVEsUUFLSGxFLE9BQU91RyxLQUFLUixHQUNSRCxJQUFJVSxJQUNELE1BQU1DLEVBQWEsRUFBQXBELE9BQU9tRCxHQUMxQixPQUNJLGdCQUFDWixFQUFTLENBQUNqRCxJQUFLOEQsRUFBWTFCLEtBQU15QixFQUN2QlgsU0FBVUUsRUFBY1MsR0FDeEIxQixZQUFhVixFQUFNVSxZQUNuQlQsY0FBZUQsRUFBTUMscUIsZ0lDNUZ4RCxNQUFhcUMsVUFBK0JDLE1BQzFDLFlBQWFDLEdBQ1hDLE1BQU0sSUFBSUQsbUVBRmQsMkJBTUEsbUJBR0ksWUFBYXpGLEdBQ1gsR0FBSTJGLE9BQU9DLE1BQU1DLEtBQUtDLE1BQU05RixJQUMxQixNQUFNLElBQUl1RixFQUF1QnZGLEdBR25DK0QsS0FBS2dDLEdBQUsvRixFQUdaLFdBQ0UsT0FBTytELEtBQUtnQyxHQUdkLGNBQ0UsT0FBT2hDLEtBQUtnQyxHQUFHQyxNQUFNLEtBQUssTSxtRkN0QmhDLGtCQUNBLFlBQ0EsWUFDQSxZQUNBLFlBRU1DLEVBQUksSUFBSSxFQUFBQyxhQUFhLElBQUksRUFBQWpCLFdBQVcsd0JBQ3hDLE1BQ0EsSUFFSWtCLEVBQUksSUFBSSxFQUFBRCxhQUFhLElBQUksRUFBQWpCLFdBQVcsd0JBQ3hDLE1BQ0EsSUFFRixFQUFBbUIsUUFBUSxnQkFBQyxFQUFBcEQsUUFBTyxDQUFDVSxRQUFTLENBQUN1QyxFQUFHRSxLQUFRRSxTQUFTQyxlQUFlIiwiZmlsZSI6Im1haW4uZmM2NjU0MmQxM2Y0ZmZkNjc3MzEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBpbnN0YWxsIGEgSlNPTlAgY2FsbGJhY2sgZm9yIGNodW5rIGxvYWRpbmdcbiBcdGZ1bmN0aW9uIHdlYnBhY2tKc29ucENhbGxiYWNrKGRhdGEpIHtcbiBcdFx0dmFyIGNodW5rSWRzID0gZGF0YVswXTtcbiBcdFx0dmFyIG1vcmVNb2R1bGVzID0gZGF0YVsxXTtcbiBcdFx0dmFyIGV4ZWN1dGVNb2R1bGVzID0gZGF0YVsyXTtcblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChpbnN0YWxsZWRDaHVua3MsIGNodW5rSWQpICYmIGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0XHQvLyBhZGQgZW50cnkgbW9kdWxlcyBmcm9tIGxvYWRlZCBjaHVuayB0byBkZWZlcnJlZCBsaXN0XG4gXHRcdGRlZmVycmVkTW9kdWxlcy5wdXNoLmFwcGx5KGRlZmVycmVkTW9kdWxlcywgZXhlY3V0ZU1vZHVsZXMgfHwgW10pO1xuXG4gXHRcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gYWxsIGNodW5rcyByZWFkeVxuIFx0XHRyZXR1cm4gY2hlY2tEZWZlcnJlZE1vZHVsZXMoKTtcbiBcdH07XG4gXHRmdW5jdGlvbiBjaGVja0RlZmVycmVkTW9kdWxlcygpIHtcbiBcdFx0dmFyIHJlc3VsdDtcbiBcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGRlZmVycmVkTW9kdWxlcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdHZhciBkZWZlcnJlZE1vZHVsZSA9IGRlZmVycmVkTW9kdWxlc1tpXTtcbiBcdFx0XHR2YXIgZnVsZmlsbGVkID0gdHJ1ZTtcbiBcdFx0XHRmb3IodmFyIGogPSAxOyBqIDwgZGVmZXJyZWRNb2R1bGUubGVuZ3RoOyBqKyspIHtcbiBcdFx0XHRcdHZhciBkZXBJZCA9IGRlZmVycmVkTW9kdWxlW2pdO1xuIFx0XHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtzW2RlcElkXSAhPT0gMCkgZnVsZmlsbGVkID0gZmFsc2U7XG4gXHRcdFx0fVxuIFx0XHRcdGlmKGZ1bGZpbGxlZCkge1xuIFx0XHRcdFx0ZGVmZXJyZWRNb2R1bGVzLnNwbGljZShpLS0sIDEpO1xuIFx0XHRcdFx0cmVzdWx0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSBkZWZlcnJlZE1vZHVsZVswXSk7XG4gXHRcdFx0fVxuIFx0XHR9XG5cbiBcdFx0cmV0dXJuIHJlc3VsdDtcbiBcdH1cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cbiBcdHZhciBkZWZlcnJlZE1vZHVsZXMgPSBbXTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIGFkZCBlbnRyeSBtb2R1bGUgdG8gZGVmZXJyZWQgbGlzdFxuIFx0ZGVmZXJyZWRNb2R1bGVzLnB1c2goW1widGpVb1wiLDFdKTtcbiBcdC8vIHJ1biBkZWZlcnJlZCBtb2R1bGVzIHdoZW4gcmVhZHlcbiBcdHJldHVybiBjaGVja0RlZmVycmVkTW9kdWxlcygpO1xuIiwiZXhwb3J0IGNvbnN0IGN5cmI1MyA9IChzdHI6IHN0cmluZywgc2VlZCA9IDApID0+IHtcbiAgbGV0IGgxID0gMHhkZWFkYmVlZiBeIHNlZWRcbiAgbGV0IGgyID0gMHg0MWM2Y2U1NyBeIHNlZWRcblxuICBmb3IgKGxldCBpID0gMCwgY2g7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBjaCA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaDEgPSBNYXRoLmltdWwoaDEgXiBjaCwgMjY1NDQzNTc2MSlcbiAgICBoMiA9IE1hdGguaW11bChoMiBeIGNoLCAxNTk3MzM0Njc3KVxuICB9XG4gIGgxID0gTWF0aC5pbXVsKGgxIF4gaDEgPj4+IDE2LCAyMjQ2ODIyNTA3KSBeIE1hdGguaW11bChoMiBeIGgyID4+PiAxMywgMzI2NjQ4OTkwOSlcbiAgaDIgPSBNYXRoLmltdWwoaDIgXiBoMiA+Pj4gMTYsIDIyNDY4MjI1MDcpIF4gTWF0aC5pbXVsKGgxIF4gaDEgPj4+IDEzLCAzMjY2NDg5OTA5KVxuICByZXR1cm4gNDI5NDk2NzI5NiAqICgyMDk3MTUxICYgaDIpICsgKGgxID4+PiAwKVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBFbnRyeUxpc3QgfSBmcm9tICcuL2VudHJ5TGlzdCdcbmltcG9ydCB7IEpvdXJuYWxFbnRyeSB9IGZyb20gJy4vSm91cm5hbEVudHJ5J1xuXG5leHBvcnQgaW50ZXJmYWNlIEpvdXJuYWxQcm9wcyB7XG4gICAgZW50cmllczogSm91cm5hbEVudHJ5W107XG59XG5cbmNvbnN0IEVkaXRvclBhbmUgPSAoKSA9PiB7XG4gIGNvbnN0IHN0eWxlcyA9IHtcbiAgICBmbGV4R3JvdzogMSxcbiAgICBiYWNrZ3JvdW5kQ29sb3I6ICd3aGl0ZScsXG4gICAgaGVpZ2h0OiAnOTYlJ1xuICB9XG4gIHJldHVybiAoPGRpdiBzdHlsZT17c3R5bGVzfSAvPilcbn1cblxuZXhwb3J0IGNvbnN0IEpvdXJuYWwgPSAocHJvcHM6IEpvdXJuYWxQcm9wcykgPT4ge1xuICBjb25zdCBbc2VsZWN0ZWRFbnRyeSwgc2V0U2VsZWN0ZWRFbnRyeV0gPSBSZWFjdC51c2VTdGF0ZShudWxsKTtcblxuICBjb25zdCBzdHlsZXMgPSB7XG4gICAgd2lkdGg6ICcxMDB2dycsXG4gICAgaGVpZ2h0OiAnMTAwdmgnLFxuICAgIGJhY2tncm91bmRDb2xvcjogJ2dyZXknLFxuICAgIGRpc3BsYXk6ICdmbGV4JyxcbiAgICBhbGlnbkl0ZW1zOiAnY2VudGVyJ1xuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8ZGl2IHN0eWxlPXtzdHlsZXN9PlxuICAgICAgPEVudHJ5TGlzdCBlbnRyaWVzPXtwcm9wcy5lbnRyaWVzfSBzZWxlY3RFbnRyeT17c2V0U2VsZWN0ZWRFbnRyeX0gc2VsZWN0ZWRFbnRyeT17c2VsZWN0ZWRFbnRyeX0vPlxuICAgICAgPEVkaXRvclBhbmUgLz5cbiAgICA8L2Rpdj5cbiAgKVxufVxuIiwiaW1wb3J0IHtEYXRlU3RyaW5nfSBmcm9tICcuL2RhdGVTdHJpbmcnXG5cbmNvbnN0IHV1aWR2NCA9ICgpID0+XG4gICAgJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLFxuICAgICAgICBjID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHIgPSBNYXRoLnJhbmRvbSgpICogMTYgfCAwLFxuICAgICAgICAgICAgICAgIHYgPSBjID09ICd4JyA/IHIgOiAociAmIDB4MyB8IDB4OCk7XG4gICAgICAgICAgICByZXR1cm4gdi50b1N0cmluZygxNik7XG4gICAgICAgIH0pO1xuXG5leHBvcnQgY2xhc3MgSm91cm5hbEVudHJ5IHtcbiAgICByZWFkb25seSBpZDogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHJlYWRvbmx5IGRhdGU6IERhdGVTdHJpbmcsXG4gICAgICAgIHJlYWRvbmx5IHRpdGxlOiBzdHJpbmcsXG4gICAgICAgIHJlYWRvbmx5IHRleHQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLmlkID0gdXVpZHY0KClcbiAgICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7Y3lyYjUzfSBmcm9tICcuL2ZhbmN5SGFzaCdcbmltcG9ydCB7RGF0ZVN0cmluZ30gZnJvbSAnLi9kYXRlU3RyaW5nJ1xuaW1wb3J0IHtKb3VybmFsRW50cnl9IGZyb20gJy4vSm91cm5hbEVudHJ5J1xuaW1wb3J0IHt1c2VTdGF0ZX0gZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRW50cnlMaXN0UHJvcHMge1xuICAgIGVudHJpZXM6IEpvdXJuYWxFbnRyeVtdO1xuICAgIHNlbGVjdEVudHJ5OiAoZTogSm91cm5hbEVudHJ5KSA9PiB2b2lkO1xuICAgIHNlbGVjdGVkRW50cnk6IEpvdXJuYWxFbnRyeTtcbn1cblxuaW50ZXJmYWNlIEVudHJ5UHJvcHMge1xuICAgIGVudHJ5OiBKb3VybmFsRW50cnk7XG4gICAgc2VsZWN0RW50cnk6IChlOiBKb3VybmFsRW50cnkpID0+IHZvaWQ7XG4gICAgc2VsZWN0ZWRFbnRyeTogSm91cm5hbEVudHJ5O1xufVxuXG5jb25zdCBFbnRyeSA9IChwcm9wczogRW50cnlQcm9wcykgPT4ge1xuXG4gICAgbGV0IGlzU2VsZWN0ZWQgPSBwcm9wcy5zZWxlY3RlZEVudHJ5ID09IHByb3BzLmVudHJ5XG5cbiAgICBjb25zdCBzZWxlY3QgPSAoKSA9PiB7XG4gICAgICAgIHByb3BzLnNlbGVjdEVudHJ5KHByb3BzLmVudHJ5KVxuICAgIH07XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICBjbGFzc05hbWU9e2lzU2VsZWN0ZWQgPyAnZW50cnkgc2VsZWN0ZWQnIDogJ2VudHJ5J31cbiAgICAgICAgICAgIHN0eWxlPXt7YmFja2dyb3VuZENvbG9yOiBpc1NlbGVjdGVkID8gXCJyZWRcIiA6IFwid2hpdGVcIn19XG4gICAgICAgICAgICBvbkNsaWNrPXtzZWxlY3R9PlxuICAgICAgICAgICAge3Byb3BzLmVudHJ5LnRpdGxlfVxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmludGVyZmFjZSBEYXRlR3JvdXBQcm9wcyB7XG4gICAgZGF0ZTogc3RyaW5nLFxuICAgIGxpc3RpbmdzOiBKb3VybmFsRW50cnlbXVxuICAgIHNlbGVjdEVudHJ5OiAoZTogSm91cm5hbEVudHJ5KSA9PiB2b2lkXG4gICAgc2VsZWN0ZWRFbnRyeTogSm91cm5hbEVudHJ5XG59XG5cbmNvbnN0IERhdGVHcm91cCA9IChwcm9wczogRGF0ZUdyb3VwUHJvcHMpID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGF0ZScgZGF0YS1kYXRlPXtwcm9wcy5kYXRlfT5cbiAgICAgICAgICAgIDxoMT57cHJvcHMuZGF0ZX08L2gxPlxuICAgICAgICAgICAge3Byb3BzLmxpc3RpbmdzLm1hcChsID0+XG4gICAgICAgICAgICAgICAgPEVudHJ5IGtleT17Y3lyYjUzKGwudGl0bGUpfSBlbnRyeT17bH1cbiAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RW50cnk9e3Byb3BzLnNlbGVjdEVudHJ5fVxuICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEVudHJ5PXtwcm9wcy5zZWxlY3RlZEVudHJ5fVxuICAgICAgICAgICAgICAgIC8+KX1cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG5jb25zdCBhc0RhdGVLZXkgPSAoeDogRGF0ZVN0cmluZyB8IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgaWYgKHggaW5zdGFuY2VvZiBEYXRlU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB4LndpdGhvdXRUaW1lKClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbmV3IERhdGVTdHJpbmcoeCkud2l0aG91dFRpbWUoKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVudHJ5TGlzdCA9IChwcm9wczogRW50cnlMaXN0UHJvcHMpID0+IHtcbiAgICBjb25zdCBpbml0aWFsOiB7IFtkYXRlS2V5OiBzdHJpbmddOiBKb3VybmFsRW50cnlbXSB9ID0ge31cbiAgICBjb25zdCBsaXN0aW5nQnlEYXRlOiB7IFtkYXRlS2V5OiBzdHJpbmddOiBKb3VybmFsRW50cnlbXSB9ID1cbiAgICAgICAgcHJvcHMuZW50cmllcy5yZWR1Y2UoKGFjYywgbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgZGF0ZUtleSA9IGFzRGF0ZUtleShsLmRhdGUpXG4gICAgICAgICAgICBpZiAoIWFjY1tkYXRlS2V5XSkge1xuICAgICAgICAgICAgICAgIGFjY1tkYXRlS2V5XSA9IFtdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY2NbZGF0ZUtleV0ucHVzaChsKVxuICAgICAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgICB9LCBpbml0aWFsKVxuXG4gICAgY29uc3Qgc3R5bGVzID0ge1xuICAgICAgICBib3JkZXJSaWdodDogJ2JsYWNrIDVweCBzb2xpZCcsXG4gICAgICAgIHdpZHRoOiAnMTAlJyxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiAnd2hpdGUnLFxuICAgICAgICBoZWlnaHQ6ICc5NiUnXG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2xpc3RpbmcnIHN0eWxlPXtzdHlsZXN9PlxuICAgICAgICAgICAge09iamVjdC5rZXlzKGxpc3RpbmdCeURhdGUpXG4gICAgICAgICAgICAgICAgLm1hcChkayA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGhhc2hlZERhdGUgPSBjeXJiNTMoZGspXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8RGF0ZUdyb3VwIGtleT17aGFzaGVkRGF0ZX0gZGF0ZT17ZGt9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RpbmdzPXtsaXN0aW5nQnlEYXRlW2RrXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0RW50cnk9e3Byb3BzLnNlbGVjdEVudHJ5fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZEVudHJ5PXtwcm9wcy5zZWxlY3RlZEVudHJ5fVxuICAgICAgICAgICAgICAgICAgICAgICAgLz4pXG4gICAgICAgICAgICAgICAgfSl9XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cbiIsImV4cG9ydCBjbGFzcyBNdXN0QmVBVmFsaWREYXRlU3RyaW5nIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvciAoZGF0ZVN0cmluZzogc3RyaW5nKSB7XG4gICAgc3VwZXIoYFwiJHtkYXRlU3RyaW5nfVwiIGlzIG5vdCBhIHZhbGlkIGRhdGUgc3RyaW5nLiBpdCBzaG91bGQgYmUgYW4gSVNPLTg2MDEgc3RyaW5nYClcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGF0ZVN0cmluZyB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkczogc3RyaW5nXG5cbiAgICBjb25zdHJ1Y3RvciAoczogc3RyaW5nKSB7XG4gICAgICBpZiAoTnVtYmVyLmlzTmFOKERhdGUucGFyc2UocykpKSB7XG4gICAgICAgIHRocm93IG5ldyBNdXN0QmVBVmFsaWREYXRlU3RyaW5nKHMpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuZHMgPSBzXG4gICAgfVxuXG4gICAgYXNTdHJpbmcgKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZHNcbiAgICB9XG5cbiAgICB3aXRob3V0VGltZSAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5kcy5zcGxpdCgnVCcpWzBdXG4gICAgfVxufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBoeWRyYXRlIH0gZnJvbSAncmVhY3QtZG9tJ1xuaW1wb3J0IHsgSm91cm5hbCB9IGZyb20gJy4vam91cm5hbCdcbmltcG9ydCB7IERhdGVTdHJpbmcgfSBmcm9tICcuL2RhdGVTdHJpbmcnXG5pbXBvcnQgeyBKb3VybmFsRW50cnkgfSBmcm9tICcuL0pvdXJuYWxFbnRyeSdcblxuY29uc3QgYSA9IG5ldyBKb3VybmFsRW50cnkobmV3IERhdGVTdHJpbmcoJzIwMjAtMDctMThUMjI6MTA6MDZaJyksXG4gICdvbmUnLFxuICAnJ1xuKVxuY29uc3QgYiA9IG5ldyBKb3VybmFsRW50cnkobmV3IERhdGVTdHJpbmcoJzIwMjAtMDctMTdUMjM6MTA6MDZaJyksXG4gICd0d28nLFxuICAnJ1xuKVxuaHlkcmF0ZSg8Sm91cm5hbCBlbnRyaWVzPXtbYSwgYl19IC8+LCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpKVxuIl0sInNvdXJjZVJvb3QiOiIifQ==