!function(e){function t(t){for(var n,l,s=t[0],a=t[1],u=t[2],d=0,f=[];d<s.length;d++)l=s[d],Object.prototype.hasOwnProperty.call(i,l)&&i[l]&&f.push(i[l][0]),i[l]=0;for(n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n]);for(c&&c(t);f.length;)f.shift()();return o.push.apply(o,u||[]),r()}function r(){for(var e,t=0;t<o.length;t++){for(var r=o[t],n=!0,s=1;s<r.length;s++){var a=r[s];0!==i[a]&&(n=!1)}n&&(o.splice(t--,1),e=l(l.s=r[0]))}return e}var n={},i={0:0},o=[];function l(t){if(n[t])return n[t].exports;var r=n[t]={i:t,l:!1,exports:{}};return e[t].call(r.exports,r,r.exports,l),r.l=!0,r.exports}l.m=e,l.c=n,l.d=function(e,t,r){l.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},l.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},l.t=function(e,t){if(1&t&&(e=l(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(l.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)l.d(r,n,function(t){return e[t]}.bind(null,n));return r},l.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return l.d(t,"a",t),t},l.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},l.p="";var s=window.webpackJsonp=window.webpackJsonp||[],a=s.push.bind(s);s.push=t,s=s.slice();for(var u=0;u<s.length;u++)t(s[u]);var c=a;o.push(["tjUo",1]),r()}({"0TlM":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.cyrb53=void 0,t.cyrb53=(e,t=0)=>{let r=3735928559^t,n=1103547991^t;for(let t,i=0;i<e.length;i++)t=e.charCodeAt(i),r=Math.imul(r^t,2654435761),n=Math.imul(n^t,1597334677);return r=Math.imul(r^r>>>16,2246822507)^Math.imul(n^n>>>13,3266489909),n=Math.imul(n^n>>>16,2246822507)^Math.imul(r^r>>>13,3266489909),4294967296*(2097151&n)+(r>>>0)}},"1/lR":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Journal=void 0;const n=r("q1tI"),i=r("7DOu"),o=()=>n.createElement("div",{style:{flexGrow:1,backgroundColor:"white",height:"96%"}});t.Journal=e=>n.createElement("div",{style:{width:"100vw",height:"100vh",backgroundColor:"grey",display:"flex",alignItems:"center"}},n.createElement(i.EntryList,{listings:e.listings}),n.createElement(o,null))},"7DOu":function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EntryList=void 0;const n=r("q1tI"),i=r("0TlM"),o=r("fsJt"),l=e=>{console.log({props:e},"making entry");const t=i.cyrb53(e.listing.title);return n.createElement("div",{key:t,className:"entry"},e.listing.title)},s=e=>n.createElement("div",{className:"date",key:e.date,"data-date":e.date},e.listings.map(e=>n.createElement(l,{listing:e})));t.EntryList=e=>{const t=e.listings.reduce((e,t)=>{const r=(n=t.date)instanceof o.DateString?n.withoutTime():new o.DateString(n).withoutTime();var n;return e[r]||(e[r]=[]),e[r].push(t),e},{});return n.createElement("div",{className:"listing",style:{borderRight:"black 5px solid",width:"10%",backgroundColor:"white",height:"96%"}},Object.keys(t).map(e=>n.createElement(s,{date:e,listings:t[e]})))}},fsJt:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DateString=t.MustBeAValidDateString=void 0;class n extends Error{constructor(e){super(`"${e}" is not a valid date string. it should be an ISO-8601 string`)}}t.MustBeAValidDateString=n;t.DateString=class{constructor(e){if(Number.isNaN(Date.parse(e)))throw new n(e);this.ds=e}asString(){return this.ds}withoutTime(){return this.ds.split("T")[0]}}},tjUo:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r("q1tI"),i=r("i8i4"),o=r("1/lR");i.hydrate(n.createElement(o.Journal,{listings:[]}),document.getElementById("root"))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,